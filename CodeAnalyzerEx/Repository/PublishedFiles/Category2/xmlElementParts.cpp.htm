<!----------------------------------------------------------------------------
   xmlElementParts.cpp.htm  -Published HTML File
   Published on : 2017-05-04.22:38:23
   Author:Karthik Palepally Muniyappa  
----------------------------------------------------------------------------->
<html>
<head>
<link rel="stylesheet" href="style.css">
</head>
<body>
<h3>xmlElementParts.cpp</h3>
<hr />
<div class="indent">
<h4>Dependencies:</h4>
<ul>
<li><a href="xmlElementParts.h.htm">xmlElementParts.h</a></li>
<li><a href="Tokenizer.h.htm">Tokenizer.h</a></li>
</ul>
</div>
<hr />
<pre>
///////////////////////////////////////////////////////////////////// 
//  XmlElementParts.cpp - Collects tokens for XML analysis         // 
//  ver 1.3                                                        // 
//                                                                 // 
//  Language:      Visual C++ 2008, SP1                            // 
//  Platform:      Dell Precision T7400, Vista Ultimate SP1        // 
//  Application:   Prototype for CSE687 Pr1, Sp09                  // 
//  Author:        Jim Fawcett, CST 4-187, Syracuse University     // 
//                 (315) 443-3948, jfawcett@twcny.rr.com           // 
///////////////////////////////////////////////////////////////////// 
 
#include &lt;algorithm&gt; 
#include "XmlElementParts.h" 
 
//----&lt; construct XmlParts instance &gt;--------------------------- 
 
XmlParts::XmlParts(Toker* pTokr) : pToker(pTokr), Verbose(false) 
{ 
} 
//----&lt; destructor &gt;------------------------------------------- 
 
XmlParts::~XmlParts() 
{ 
} 
//----&lt; is this a terminating token? &gt;------------------------- 
 
bool XmlParts::isTerminator(std::string tok) 
{<button onclick="myFunction(this)" id="button139">-</button><pre class="showElem" id="button139_pre"> 
  if(tok.length() == 0) 
    return false; 
  if(tok == "&gt;") 
    return true; 
  return false; 
</pre>} 
// 
//----&lt; collect an XmlElementParts sequence &gt;------------------ 
 
bool XmlParts::get() 
{<button onclick="myFunction(this)" id="button140">-</button><pre class="showElem" id="button140_pre"> 
  toks.clear(); 
  std::string tok; 
  do 
  { 
    if(pToker-&gt;isFileEnd()) 
    { 
      if(length() &gt; 0) 
        return true; 
      return false; 
    } 
    tok = pToker-&gt;getTok(); 
    if(Verbose) 
    { 
      if(tok != "\n") 
        std::cout &lt;&lt; "\n--tok=" &lt;&lt; tok &lt;&lt; std::endl; 
      else 
        std::cout &lt;&lt; "\n--tok=newline\n"; 
    } 
    if(toks.size() &gt; 0 && tok == "&lt;") 
    { 
      pToker-&gt;putback('&lt;'); 
      break; 
    } 
    if(tok != "\n") 
      toks.push_back(tok); 
  } while(!isTerminator(tok)); 
  return true; 
</pre>} 
//----&lt; index operator &gt;--------------------------------------- 
 
std::string& XmlParts::operator[](int n) 
{<button onclick="myFunction(this)" id="button141">-</button><pre class="showElem" id="button141_pre"> 
  if(n &lt; 0 || toks.size() &lt;= (size_t)n) 
    throw std::exception("XmlParts index out of range"); 
  return toks[n]; 
</pre>} 
//----&lt; collect semi-expression as space-seperated string &gt;---- 
 
std::string XmlParts::show() 
{<button onclick="myFunction(this)" id="button142">-</button><pre class="showElem" id="button142_pre"> 
  if(toks.size() == 0) 
    return ""; 
  std::string temp(" "); 
  for(size_t i=0; i&lt;toks.size(); ++i) 
    if(toks[i] != "\n") 
      temp.append(" ").append(toks[i]); 
  return temp; 
</pre>} 
// 
//----&lt; is tok found in XmlElementParts? &gt;--------------------- 
 
int XmlParts::find(const std::string& tok) 
{<button onclick="myFunction(this)" id="button143">-</button><pre class="showElem" id="button143_pre"> 
  for(int i=0; i&lt;length(); ++i) 
    if(tok == toks[i]) 
      return i; 
  return length(); 
</pre>} 
//----&lt; remove tok if found in semi-expression &gt;--------------- 
 
bool XmlParts::remove(const std::string& tok) 
{<button onclick="myFunction(this)" id="button144">-</button><pre class="showElem" id="button144_pre"> 
  std::vector&lt;std::string&gt;::iterator it; 
  it = std::find(toks.begin(),toks.end(),tok); 
  if(it != toks.end()) 
  { 
    toks.erase(it); 
    return true; 
  } 
  return false; 
</pre>} 
//----&lt; remove leading newlines &gt;------------------------------ 
 
void XmlParts::trimFront() 
{<button onclick="myFunction(this)" id="button145">-</button><pre class="showElem" id="button145_pre"> 
  while(toks.size() &gt; 0 && toks[0] == "\n") 
    remove("\n"); 
</pre>} 
//----&lt; make tokens lowercase &gt;-------------------------------- 
 
void XmlParts::toLower() 
{<button onclick="myFunction(this)" id="button146">-</button><pre class="showElem" id="button146_pre"> 
  for(int i=0; i&lt;length(); ++i) 
  { 
    for(size_t j=0; j&lt;(*this)[i].length(); ++j) 
    { 
      (*this)[i][j] = tolower((*this)[i][j]); 
    } 
  } 
</pre>} 
// 
//----&lt; test stub &gt;-------------------------------------------- 
 
#ifdef TEST_XMLELEMENTPARTS 
 
int main(int argc, char* argv[]) 
{<button onclick="myFunction(this)" id="button147">-</button><pre class="showElem" id="button147_pre"> 
  std::cout &lt;&lt; "\n  Testing XmlParts class\n " 
            &lt;&lt; std::string(23,'=') &lt;&lt; std::endl; 
  std::cout 
    &lt;&lt; "\n  Note that quotes are returned as single tokens\n\n"; 
 
  if(argc &lt; 2) 
  { 
    std::cout  
      &lt;&lt; "\n  please enter name of file to process on command line\n\n"; 
    return 1; 
  } 
 
  for(int i=1; i&lt;argc; ++i) 
  { 
    std::cout &lt;&lt; "\n  Processing file " &lt;&lt; argv[i]; 
    std::cout &lt;&lt; "\n  " &lt;&lt; std::string(16 + strlen(argv[i]),'-') &lt;&lt; "\n\n"; 
    try 
    { 
      Toker toker(argv[i]); 
      toker.setMode(Toker::xml); 
      XmlParts parts(&toker); 
    //parts.verbose();                 // uncomment to show token details 
      while(parts.get()) 
        std::cout &lt;&lt; parts.show().c_str() &lt;&lt; std::endl; 
      std::cout &lt;&lt; "\n\n"; 
    } 
    catch(std::exception ex) 
    { 
      std::cout &lt;&lt; "\n  " &lt;&lt; ex.what() &lt;&lt; "\n\n"; 
    } 
  } 
</pre>} 
 
#endif 
</pre>
<script src="hideHandler.js"></script>
</body>
</html>