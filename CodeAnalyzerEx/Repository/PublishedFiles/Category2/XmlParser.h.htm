<!----------------------------------------------------------------------------
   XmlParser.h.htm  -Published HTML File
   Published on : 2017-05-04.22:38:23
   Author:Karthik Palepally Muniyappa  
----------------------------------------------------------------------------->
<html>
<head>
<link rel="stylesheet" href="style.css">
</head>
<body>
<h3>XmlParser.h</h3>
<hr />
<div class="indent">
<h4>Dependencies:</h4>
<ul>
<li><a href="XmlParser.cpp.htm">XmlParser.cpp</a></li>
<li><a href="XmlDocument.h.htm">XmlDocument.h</a></li>
<li><a href="XmlElement.h.htm">XmlElement.h</a></li>
<li><a href="XmlDocument.cpp.htm">XmlDocument.cpp</a></li>
<li><a href="itokcollection.h.htm">itokcollection.h</a></li>
<li><a href="xmlElementParts.h.htm">xmlElementParts.h</a></li>
<li><a href="Tokenizer.h.htm">Tokenizer.h</a></li>
</ul>
</div>
<hr />
<pre>
#ifndef XMLPARSER_H 
#define XMLPARSER_H 
/////////////////////////////////////////////////////////////////// 
// XmlParser.h - build XML parse tree                            // 
// ver 1.3                                                       // 
// Application: Support for XmlDocument, Summer 2015             // 
// Platform:    Dell XPS 2720, Win 8.1 Pro, Visual Studio 2013   // 
// Author:      Jim Fawcett, CST 4-187, 443-3948                 // 
//              jfawcett@twcny.rr.com                            // 
/////////////////////////////////////////////////////////////////// 
/* 
* Package Operations: 
* ------------------- 
* The XML Document Model is essentially a program-friendly wrapper 
* around an Abstract Syntax Tree (AST) used to contain the results  
* of parsing XML markup. 
* 
* This package provides parsing of an XML file or string and builds 
* it's AST.  See the prologue of the XmlDocument package for more 
* details. 
* 
* XmlParser objects throw if given an invalid path to an XML file. 
* 
* Required Files: 
* --------------- 
*   - XmlParser.h, XmlParser.cpp,  
*   - XmlElementParts.h, XmlElementParts.cpp 
*   - XmlDocument.h, XmlDocument.cpp, XmlElement.h, XmlElement.cpp 
*   - ITokenCollection.h, Tokenizer.h, Tokenizer.cpp 
*   - Utilities.Lib 
 
* Build Process: 
* -------------- 
*   devenv XmlParser.sln /debug rebuild 
* 
* Maintenance History: 
* -------------------- 
* Ver 1.3 : 01 Jun 15 
* - made constr src string const 
* - added src_ member string 
* Ver 1.2 : 31 May 15 
* - factored parsing code to reduce size and complexity 
* - renamed a couple of methods to improve readability 
* Ver 1.1 : 30 May 15 
* - reconfigured code to use and support repository storage 
*   - using Repository::Utilities 
*   - added Repository\include to Environment's Path to support 
*     #include &lt;utilities&gt; 
* Ver 1.0 : 28 May 15 
* - first release 
* 
* ToDo: 
* ----- 
* - polish into production code 
*   - rigourous testing 
*/ 
 
#include "../XmlElementParts/itokcollection.h" 
#include "../XmlElementParts/xmlElementParts.h" 
#include "../XmlElement/XmlElement.h" 
#include &lt;vector&gt; 
#include &lt;stack&gt; 
#include &lt;memory&gt; 
 
namespace XmlProcessing 
{ 
  class XmlDocument; 
 
  class XmlParser 
  {<button onclick="myFunction(this)" id="button52">-</button><pre class="showElem" id="button52_pre"> 
  public: 
    using sPtr = std::shared_ptr &lt; AbstractXmlElement &gt; ; 
    using attrib = std::pair &lt; std::string, std::string &gt; ; 
    using attribs = std::vector &lt;attrib&gt; ; 
    using ElemStack = std::stack &lt; sPtr &gt; ; 
 
    enum sourceType { file, str }; 
    XmlParser(const std::string& src, sourceType type = file); 
    bool good(); 
    XmlDocument* buildDocument(); 
    bool verbose(bool verb = true); 
  private: 
    std::string textFileToString(const std::string& fileSpec); 
    void compress(std::string& xmlStr); 
    std::string enquoteText(const std::string& src); 
    std::string dequoteText(const std::string& src); 
    sPtr createXmlDeclar(); 
    sPtr createProcInstr(); 
    sPtr createComment(); 
    sPtr createTaggedElem(); 
    sPtr createTextElem(); 
    void processMarkup(ElemStack& stack); 
    void processText(ElemStack& stack); 
    void processEndElem(); 
    void extractAttributes(); 
    void showAttributes(); 
    attribs& attributes(); 
    attribs attribs_; 
    ITokCollection* pTokColl_; 
    XmlParts* pXmlParts_; 
    Toker* pToker_ = nullptr; 
    std::string src_; 
    bool verbose_ = false; 
    bool good_ = false; 
</pre>  }; 
 
  inline bool XmlParser::good() { return good_; } 
  inline XmlParser::attribs& XmlParser::attributes() { return attribs_; } 
  inline bool XmlParser::verbose(bool verb) <button onclick="myFunction(this)" id="button55">-</button><pre class="showElem" id="button55_pre"> 
  {  
    bool temp = verbose_;   
    verbose_ = verb;  
    return temp;  
</pre>  } 
} 
#endif 
</pre>
<script src="hideHandler.js"></script>
</body>
</html>